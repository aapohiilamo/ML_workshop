library(gt)
library(dplyr)
# Define the timetable data
timetable <- data.frame(
Time_D1 = c("09:00 - 09:10", "9:10 - 10:30", "10:30 - 10:50", "10:50 - 11:50", "11:50 - 13:00",
"13:00 - 14:00", "14:00 - 15:30", "15:30 - 16:50", "16:50 - 17:00", "17:00 - 18:00", "19:00+"),
Title_D1 = c("Opening: Mikko + housekeeping", "Session 1 (4 presenters)", "Coffee break", "Session 2 (3 presenters)", "Lunch",
"Session 3 (3 presenters)", "Coffee break + Poster", "Session 4 (4 presenters)", "Coffee break", "Keynote 1: Jennie Brand", "Social dinner"),
Time_D2 = c("9:20 - 10:20", "10:20 - 10:40", "10:40 - 12:00", "12:00 - 13:00", "13:00 - 14:00",
"14:00 - 14:20", "14:20 - 15:20", "15:20 - 15:40", "15:40 - 16:40", "16:40 - 16:50", "16:50 - 18:00"),
Title_D2 = c("Keynote 2: Ian Lundberg", "Coffee break", "Session 5 (4 presenters)", "Lunch", "Session 6 (3 presenters)",
"Coffee break", "Tutorial", "Coffee break", "Session 7 (3 presenters)", "Coffee break", "Panel discussion + closing")
)
# Create the table using gt
gt_table <- gt(timetable) %>%
tab_header(
title = "Timetable Example"
) %>%
tab_spanner(
label = "Day 1 - 05/11/2024",
columns = c(Time_D1, Title_D1)
) %>%
tab_spanner(
label = "Day 2 - 06/11/2024",
columns = c(Time_D2, Title_D2)
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
tab_style(
style = cell_fill(color = "lightgreen"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(2, 4, 6, 8, 10, 3, 7, 9, 11)
)
) %>%
tab_style(
style = cell_fill(color = "lightblue"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(3, 7, 9, 11, 2, 8)
)
) %>%
tab_style(
style = cell_fill(color = "lightyellow"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(1, 5, 12)
)
) %>%
tab_style(
style = cell_fill(color = "lightcoral"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(10, 1)
)
) %>%
tab_style(
style = cell_borders(
sides = "all",
color = "grey",
weight = px(1)
),
locations = cells_body()
)
View(timetable)
library(gt)
library(dplyr)
# Define the timetable data
timetable <- data.frame(
Time_D1 = c("09:00 - 09:10", "9:10 - 10:30", "10:30 - 10:50", "10:50 - 11:50", "11:50 - 13:00",
"13:00 - 14:00", "14:00 - 15:30", "15:30 - 16:50", "16:50 - 17:00", "17:00 - 18:00", "19:00+"),
Title_D1 = c("Opening: Mikko + housekeeping", "Session 1 (4 presenters)", "Coffee break", "Session 2 (3 presenters)", "Lunch",
"Session 3 (3 presenters)", "Coffee break + Poster", "Session 4 (4 presenters)", "Coffee break", "Keynote 1: Jennie Brand", "Social dinner"),
Time_D2 = c("9:20 - 10:20", "10:20 - 10:40", "10:40 - 12:00", "12:00 - 13:00", "13:00 - 14:00",
"14:00 - 14:20", "14:20 - 15:20", "15:20 - 15:40", "15:40 - 16:40", "16:40 - 16:50", "16:50 - 18:00"),
Title_D2 = c("Keynote 2: Ian Lundberg", "Coffee break", "Session 5 (4 presenters)", "Lunch", "Session 6 (3 presenters)",
"Coffee break", "Tutorial", "Coffee break", "Session 7 (3 presenters)", "Coffee break", "Panel discussion + closing")
)
# Create the table using gt
gt_table <- gt(timetable) %>%
tab_header(
title = "Timetable Example"
) %>%
tab_spanner(
label = "Day 1 - 05/11/2024",
columns = c(Time_D1, Title_D1)
) %>%
tab_spanner(
label = "Day 2 - 06/11/2024",
columns = c(Time_D2, Title_D2)
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
tab_style(
style = cell_fill(color = "lightgreen"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(2, 4, 6, 8)
)
) %>%
tab_style(
style = cell_fill(color = "lightblue"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(3, 7, 9)
)
) %>%
tab_style(
style = cell_fill(color = "lightyellow"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(5)
)
) %>%
tab_style(
style = cell_fill(color = "lightcoral"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(1, 10)
)
) %>%
tab_style(
style = cell_borders(
sides = "all",
color = "grey",
weight = px(1)
),
locations = cells_body()
)
# Render the table
gt_table
library(gt)
library(dplyr)
# Define the timetable data
timetable <- data.frame(
Time_D1 = c("09:00 - 09:10", "9:10 - 10:30", "10:30 - 10:50", "10:50 - 11:50", "11:50 - 13:00",
"13:00 - 14:00", "14:00 - 15:30", "15:30 - 16:50", "16:50 - 17:00", "17:00 - 18:00", "19:00+"),
Title_D1 = c("Opening: Mikko + housekeeping", "Session 1 (4 presenters)", "Coffee break", "Session 2 (3 presenters)", "Lunch",
"Session 3 (3 presenters)", "Coffee break + Poster", "Session 4 (4 presenters)", "Coffee break", "Keynote 1: Jennie Brand", "Social dinner"),
Time_D2 = c("9:20 - 10:20", "10:20 - 10:40", "10:40 - 12:00", "12:00 - 13:00", "13:00 - 14:00",
"14:00 - 14:20", "14:20 - 15:20", "15:20 - 15:40", "15:40 - 16:40", "16:40 - 16:50", "16:50 - 18:00"),
Title_D2 = c("Keynote 2: Ian Lundberg", "Coffee break", "Session 5 (4 presenters)", "Lunch", "Session 6 (3 presenters)",
"Coffee break", "Tutorial", "Coffee break", "Session 7 (3 presenters)", "Coffee break", "Panel discussion + closing")
)
# Create the table using gt
gt_table <- gt(timetable) %>%
tab_header(
title = "Timetable Example"
) %>%
tab_spanner(
label = "Day 1 - 05/11/2024",
columns = c(Time_D1, Title_D1)
) %>%
tab_spanner(
label = "Day 2 - 06/11/2024",
columns = c(Time_D2, Title_D2)
) %>%
cols_label(
Time_D1 = "",
Title_D1 = "",
Time_D2 = "",
Title_D2 = ""
) %>%
cols_align(
align = "center",
columns = everything()
) %>%
tab_style(
style = cell_fill(color = "lightgreen"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(2, 4, 6, 8)
)
) %>%
tab_style(
style = cell_fill(color = "lightblue"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(3, 7, 9)
)
) %>%
tab_style(
style = cell_fill(color = "lightyellow"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(5)
)
) %>%
tab_style(
style = cell_fill(color = "lightcoral"),
locations = cells_body(
columns = starts_with("Title"),
rows = c(1, 10)
)
) %>%
tab_style(
style = cell_borders(
sides = "all",
color = "grey",
weight = px(1)
),
locations = cells_body()
)
# Render the table
gt_table
library(reactable)
# Define the schedule data
schedule <- data.frame(
Session = c("Session 1", "Session 1", "Session 1",
"Session 2", "Session 2",
"Session 3", "Session 3", "Session 3"),
Presenter = c("Alice Johnson", "Bob Smith", "Carol Lee",
"David Brown", "Eva Green",
"Frank White", "Grace Kim", "Henry Gold"),
Title = c("Innovations in AI", "Machine Learning Trends", "Data Science in Practice",
"Advances in Robotics", "Automation in Industry",
"Quantum Computing", "Blockchain Technology", "Cybersecurity Essentials")
)
# Create a nested table for each session
nested_data <- list(
"Session 1" = data.frame(Presenter = schedule$Presenter[1:3], Title = schedule$Title[1:3]),
"Session 2" = data.frame(Presenter = schedule$Presenter[4:5], Title = schedule$Title[4:5]),
"Session 3" = data.frame(Presenter = schedule$Presenter[6:8], Title = schedule$Title[6:8])
)
# Define the reactable table
table <- reactable(
data.frame(Session = unique(schedule$Session)),
columns = list(
Session = colDef(
cell = function(value, index) {
reactable::reactable(nested_data[[value]], columns = list(
Presenter = colDef(name = "Presenter"),
Title = colDef(name = "Presentation Title")
), inline = TRUE)
}
)
),
details = function(index) {
reactable(nested_data[[unique(schedule$Session)[index]]])
},
searchable = TRUE,
showPageSizeOptions = TRUE,
pagination = TRUE,
groupBy = "Session"
)
library(reactable)
# Define the schedule data with multiple presenters per session
schedule <- data.frame(
Session = c("Session 1", "Session 1", "Session 1",
"Session 2", "Session 2",
"Session 3", "Session 3", "Session 3"),
Presenter = c("Alice Johnson", "Bob Smith", "Carol Lee",
"David Brown", "Eva Green",
"Frank White", "Grace Kim", "Henry Gold"),
Title = c("Innovations in AI", "Machine Learning Trends", "Data Science in Practice",
"Advances in Robotics", "Automation in Industry",
"Quantum Computing", "Blockchain Technology", "Cybersecurity Essentials")
)
# Create a summary table for the sessions
session_summary <- unique(schedule[, "Session", drop = FALSE])
# Define the reactable table
table <- reactable(
session_summary,
details = function(index) {
session_name <- session_summary$Session[index]
reactable(
schedule[schedule$Session == session_name, c("Presenter", "Title")],
columns = list(
Presenter = colDef(name = "Presenter"),
Title = colDef(name = "Presentation Title")
),
highlight = TRUE,
fullWidth = TRUE
)
},
searchable = TRUE,
showPageSizeOptions = TRUE,
pagination = TRUE
)
table
library(reactable)
---
title: "Interactive Timetable Example"
library(reactable)
# Define the schedule data with seven sessions, each having four presenters
schedule <- data.frame(
Session = rep(paste("Session", 1:7), each = 4),
Presenter = c("Alice Johnson", "Bob Smith", "Carol Lee", "Diane Miller",
"Eva Green", "Frank White", "Grace Kim", "Henry Gold",
"Ian Brown", "Jackie Wilson", "Kara White", "Liam Green",
"Mona Scott", "Nate Lewis", "Olivia Jones", "Paul Adams",
"Quincy Roberts", "Rachel King", "Sam Harris", "Tina Clark",
"Uma Turner", "Victor Price", "Wendy Lee", "Xander Young",
"Yara Smith", "Zach Johnson", "Amy Doe", "Brian Black"),
Title = c("Innovations in AI", "Machine Learning Trends", "Data Science in Practice", "Deep Learning Applications",
"Advances in Robotics", "Automation in Industry", "IoT in Smart Cities", "Cloud Computing",
"Quantum Computing", "Blockchain Technology", "Cybersecurity Essentials", "Edge Computing",
"Augmented Reality", "Virtual Reality", "Mixed Reality", "Gaming Technologies",
"Big Data Analytics", "Data Privacy", "Ethical AI", "AI in Healthcare",
"Digital Twins", "Smart Manufacturing", "Sustainable Tech", "Green Computing",
"Future of Work", "5G Technologies", "Tech in Education", "Tech in Finance")
)
# Create a summary table for the sessions
session_summary <- unique(schedule[, "Session", drop = FALSE])
# Define the reactable table
table <- reactable(
session_summary,
details = function(index) {
session_name <- session_summary$Session[index]
reactable(
schedule[schedule$Session == session_name, c("Presenter", "Title")],
columns = list(
Presenter = colDef(name = "Presenter"),
Title = colDef(name = "Presentation Title")
),
highlight = TRUE,
fullWidth = TRUE
)
},
searchable = TRUE,
showPageSizeOptions = TRUE,
pagination = TRUE
)
table
library(reactable)
# Define the schedule data with seven sessions, each having four presenters
schedule <- data.frame(
Session = rep(paste("Session", 1:7), each = 4),
Presenter = c("Alice Johnson", "Bob Smith", "Carol Lee", "Diane Miller",
"Eva Green", "Frank White", "Grace Kim", "Henry Gold",
"Ian Brown", "Jackie Wilson", "Kara White", "Liam Green",
"Mona Scott", "Nate Lewis", "Olivia Jones", "Paul Adams",
"Quincy Roberts", "Rachel King", "Sam Harris", "Tina Clark",
"Uma Turner", "Victor Price", "Wendy Lee", "Xander Young",
"Yara Smith", "Zach Johnson", "Amy Doe", "Brian Black"),
Title = c("Innovations in AI", "Machine Learning Trends", "Data Science in Practice", "Deep Learning Applications",
"Advances in Robotics", "Automation in Industry", "IoT in Smart Cities", "Cloud Computing",
"Quantum Computing", "Blockchain Technology", "Cybersecurity Essentials", "Edge Computing",
"Augmented Reality", "Virtual Reality", "Mixed Reality", "Gaming Technologies",
"Big Data Analytics", "Data Privacy", "Ethical AI", "AI in Healthcare",
"Digital Twins", "Smart Manufacturing", "Sustainable Tech", "Green Computing",
"Future of Work", "5G Technologies", "Tech in Education", "Tech in Finance")
)
# Combine the presenters and titles into a single column for hidden searching
schedule$SearchContent <- paste(schedule$Presenter, schedule$Title)
# Create a summary table for the sessions
session_summary <- unique(schedule[, "Session", drop = FALSE])
# Define the reactable table with hidden searchable content
table <- reactable(
session_summary,
details = function(index) {
session_name <- session_summary$Session[index]
reactable(
schedule[schedule$Session == session_name, c("Presenter", "Title")],
columns = list(
Presenter = colDef(name = "Presenter"),
Title = colDef(name = "Presentation Title")
),
highlight = TRUE,
fullWidth = TRUE
)
},
columns = list(
# Add a hidden column for search purposes
Session = colDef(name = "Session"),
SearchContent = colDef(show = FALSE)
),
searchable = TRUE,
searchMethod = function(rows, search_string) {
rows[grepl(search_string, schedule$SearchContent, ignore.case = TRUE), ]
},
showPageSizeOptions = TRUE,
pagination = TRUE
)
library(reactable)
# Define the schedule data with seven sessions, each having four presenters
schedule <- data.frame(
Session = rep(paste("Session", 1:7), each = 4),
Presenter = c("Alice Johnson", "Bob Smith", "Carol Lee", "Diane Miller",
"Eva Green", "Frank White", "Grace Kim", "Henry Gold",
"Ian Brown", "Jackie Wilson", "Kara White", "Liam Green",
"Mona Scott", "Nate Lewis", "Olivia Jones", "Paul Adams",
"Quincy Roberts", "Rachel King", "Sam Harris", "Tina Clark",
"Uma Turner", "Victor Price", "Wendy Lee", "Xander Young",
"Yara Smith", "Zach Johnson", "Amy Doe", "Brian Black"),
Title = c("Innovations in AI", "Machine Learning Trends", "Data Science in Practice", "Deep Learning Applications",
"Advances in Robotics", "Automation in Industry", "IoT in Smart Cities", "Cloud Computing",
"Quantum Computing", "Blockchain Technology", "Cybersecurity Essentials", "Edge Computing",
"Augmented Reality", "Virtual Reality", "Mixed Reality", "Gaming Technologies",
"Big Data Analytics", "Data Privacy", "Ethical AI", "AI in Healthcare",
"Digital Twins", "Smart Manufacturing", "Sustainable Tech", "Green Computing",
"Future of Work", "5G Technologies", "Tech in Education", "Tech in Finance")
)
# Combine presenters and titles into a single searchable string
schedule$SearchContent <- paste(schedule$Presenter, schedule$Title)
# Create a summary table for the sessions
session_summary <- unique(schedule[, "Session", drop = FALSE])
# Define the reactable table
table <- reactable(
session_summary,
searchable = TRUE,
details = function(index) {
session_name <- session_summary$Session[index]
reactable(
schedule[schedule$Session == session_name, c("Presenter", "Title")],
columns = list(
Presenter = colDef(name = "Presenter"),
Title = colDef(name = "Presentation Title")
),
highlight = TRUE,
fullWidth = TRUE,
searchable = FALSE  # Disable search in the expanded details view
)
},
columns = list(
Session = colDef(name = "Session"),
SearchContent = colDef(show = FALSE)  # Hide the searchable content
),
searchMethod = JS("
function(rows, columnIds, filterText) {
return rows.filter(function(row) {
return row['SearchContent'].toLowerCase().includes(filterText.toLowerCase())
})
}
"),
showPageSizeOptions = TRUE,
pagination = TRUE
)
